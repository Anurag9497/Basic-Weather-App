{"version":3,"sources":["components/CityInput/index.js","components/CityWeather/index.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","useState","error","setError","Container","className","Form","Group","controlId","Control","type","value","placeholder","onChange","event","target","id","Button","variant","onClick","CityWeather","cityWeather","Table","bordered","name","coord","lat","toFixed","lon","main","temp","temp_max","temp_min","weather","description","wind","speed","pressure","feels_like","humidity","clouds","all","App","setCityWeather","fetch","then","response","json","data","cod","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sSAwCeA,EApCG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,iBAAsB,EAC3BC,mBAAS,IADkB,mBAC9CC,EAD8C,KACvCC,EADuC,KAmBrD,OACA,qCACI,cAACC,EAAA,EAAD,CAAWC,UAAU,OAArB,SACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,MAAOb,EAAMc,YAAY,0BAA0BC,SArB/D,SAACC,GACvBf,EAAQe,EAAMC,OAAOJ,UAqBb,mBAAGN,UAAU,cAAb,SAA4BH,WAIpC,cAACE,EAAA,EAAD,CAAWY,GAAG,SAAd,SACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAvBb,WACbrB,GAMAK,EAAS,IACTH,KALAG,EAAS,wBAoBT,0B,QCMGiB,G,MApCK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAElB,OACI,mCACmB,KAAdA,GACG,cAACjB,EAAA,EAAD,CAAWY,GAAG,QAAd,SACI,eAACM,EAAA,EAAD,CAAOC,UAAQ,EAACL,QAAQ,OAAxB,UACI,+BACI,6BAAK,cAAgBG,EAAYG,OACjC,6BAAK,aAAeH,EAAYI,MAAMC,IAAIC,QAAQ,GAAG,SACrD,6BAAK,cAAgBN,EAAYI,MAAMG,IAAID,QAAQ,GAAG,YAE1D,+BACI,6BAAK,yBAA2BN,EAAYQ,KAAKC,KAAK,QAAQH,QAAQ,GAAG,UACzE,6BAAK,yBAA2BN,EAAYQ,KAAKE,SAAS,QAAQJ,QAAQ,GAAG,UAC7E,6BAAK,yBAA2BN,EAAYQ,KAAKG,SAAS,QAAQL,QAAQ,GAAG,aAGjF,+BACI,6BAAK,sBAAwBN,EAAYY,QAAQ,GAAGC,cACpD,6BAAK,eAAiBb,EAAYc,KAAKC,MAAM,SAC7C,6BAAK,aAAef,EAAYQ,KAAKQ,SAAS,YAGlD,+BACI,6BAAK,eAAiBhB,EAAYQ,KAAKS,WAAW,QAAQX,QAAQ,GAAG,UACrE,6BAAK,aAAeN,EAAYQ,KAAKU,SAAS,MAC9C,6BAAK,eAAiBlB,EAAYmB,OAAOC,IAAI,kBCF1DC,MAxBf,WAAgB,IAAD,EACWzC,mBAAS,IADpB,mBACNH,EADM,KACAC,EADA,OAEyBE,mBAAS,IAFlC,mBAENoB,EAFM,KAEOsB,EAFP,KAeb,OACE,qCACE,oBAAI3B,GAAG,YAAYX,UAAU,wBAA7B,yBAAqE,uBACrE,cAAC,EAAD,CAAWP,KAAMA,EAAMC,QAASA,EAASC,iBAdpB,WACvB4C,MAAM,qDAAD,OAAsD9C,EAAtD,4CACJ+C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEU,QAAXA,EAAKC,IACNN,EAAeK,GAEfE,MAAM,2BAMsE,uBAC9E,cAAC,EAAD,CAAa7B,YAAaA,QCZjB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.a43642cd.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Container, Form, Button } from 'react-bootstrap';\r\nimport './index.css';\r\n\r\nconst CityInput = ({city, setCity, fetchCityWeather}) => {\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const handleInputChange = (event) => {\r\n        setCity(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        if(!city)\r\n        {\r\n            setError(\"City Feild is Empty\");\r\n        }\r\n        else\r\n        {\r\n            setError(\"\");\r\n            fetchCityWeather();\r\n        }\r\n    };\r\n\r\n    return(\r\n    <>\r\n        <Container className=\"mt-4\">\r\n            <Form>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Control type=\"text\" value={city} placeholder=\"Enter your city name...\" onChange={handleInputChange}/>\r\n                <p className=\"text-danger\">{error}</p>\r\n                </Form.Group>\r\n            </Form>\r\n        </Container>\r\n        <Container id=\"center\">\r\n            <Button variant=\"primary\" onClick={handleSubmit}>Submit</Button>\r\n        </Container>\r\n    </>\r\n    );\r\n};\r\n\r\nexport default CityInput;","import React from 'react';\r\nimport {Container, Table} from 'react-bootstrap';\r\nimport './index.css';\r\n\r\nconst CityWeather = ({cityWeather}) => {\r\n\r\n    return(\r\n        <>\r\n            {cityWeather!==\"\" &&\r\n                <Container id=\"mytbl\">\r\n                    <Table bordered variant=\"dark\">\r\n                        <tr>\r\n                            <td>{\"City Name: \" + cityWeather.name}</td>\r\n                            <td>{\"Latitude: \" + cityWeather.coord.lat.toFixed(2)+\"°\"}</td>\r\n                            <td>{\"Longitude: \" + cityWeather.coord.lon.toFixed(2)+\"°\"}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{\"Average Temperature: \" + (cityWeather.main.temp-273.15).toFixed(2)+\"°C\"}</td>\r\n                            <td>{\"Maximum Temperature: \" + (cityWeather.main.temp_max-273.15).toFixed(2)+\"°C\"}</td>\r\n                            <td>{\"Minimum Temperature: \" + (cityWeather.main.temp_min-273.15).toFixed(2)+\"°C\"}</td>\r\n                            \r\n                        </tr>\r\n                        <tr>\r\n                            <td>{\"Weather Condition: \" + cityWeather.weather[0].description}</td>\r\n                            <td>{\"Wind Speed: \" + cityWeather.wind.speed+\" m/s\"}</td>\r\n                            <td>{\"Pressure: \" + cityWeather.main.pressure+\" hPa\"}</td>\r\n                            \r\n                        </tr>\r\n                        <tr>\r\n                            <td>{\"Real Feel: \" + (cityWeather.main.feels_like-273.15).toFixed(2)+\"°C\"}</td>\r\n                            <td>{\"Humidity: \" + cityWeather.main.humidity+\"%\"}</td>\r\n                            <td>{\"Cloudiness: \" + cityWeather.clouds.all+\"%\"}</td>\r\n                        </tr>\r\n                    </Table>\r\n                </Container>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CityWeather;","import React, {useState} from 'react';\nimport './App.css';\nimport CityInput from '../CityInput';\nimport CityWeather from '../CityWeather';\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [cityWeather, setCityWeather] = useState(\"\");\n\n  const fetchCityWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=6639f695e3fec3d48b82d60b01794e8e`)\n    .then(response => response.json())\n    .then(data => {\n      // console.log(data);\n      if(data.cod!==\"404\")\n        setCityWeather(data);\n      else\n        alert(\"Invalid City Name\");\n    })\n  };\n  return (\n    <>\n      <h2 id=\"myheading\" className=\"display-4 text-center\">Weather App</h2><br/>\n      <CityInput city={city} setCity={setCity} fetchCityWeather={fetchCityWeather}/><br/>\n      <CityWeather cityWeather={cityWeather}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}